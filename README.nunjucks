# Pixelbin

Pixelbin Swift library helps you integrate Pixelbin with your iOS Application.

## Usage

### Installing using Swift Package Manager

1. **Open Your Xcode Project:**
   - Launch Xcode and open your existing project or create a new one.

2. **Open the Swift Packages Tab:**
   - In the project navigator, select your project file to open the project settings.
   - Select the target you want to add the package to.
   - Click on the `Swift Packages` tab.

3. **Add a Swift Package:**
   - Click the `+` button at the bottom left of the `Swift Packages` tab.
   - In the search bar, enter the URL of the repository: `https://github.com/pixelbin-io/pixelbin-kotlin-sdk.git`

4. **Specify Version Rules:**
   - Choose the version rule that fits your needs. You can select from:
     - **Branch:** Specify a branch like `main` or `master`.
     - **Exact Version:** Specify an exact version number.
     - **Range:** Define a version range.

5. **Add the Package:**
   - Click `Next` to fetch the repository and validate the package.
   - After validation, select the package products you need and the target to which they should be added.
   - Click `Finish` to add the package to your project.

### Installing using Cocoapods

Add the dependency to your `Podfile`:

```ruby
pod 'Pixelbin', '~>1.0.1'
```

Install the dependency:

```sh
pod install
```

To add the Pixelbin Kotlin SDK as a Swift Package Manager (SPM) dependency to your iOS project using the provided URL, follow these steps:

### Creating Image from URL or Cloud details

```swift
import PixelbinSwift

guard let imageFromUrl = PixelBin.shared.image(url: "https://cdn.pixelbin.io/v2/dummy-cloudname/erase.bg(shadow:false,r:true,i:general)~af.remove()~t.blur(s:0.3,dpr:1.0)/__playground/playground-default.jpeg") else {
    return
}
print(imageFromUrl.encoded)

// Create Image url from cloud, zone and other details
let imageFromDetails = PixelBin.shared.image(imagePath: imageFromUrl.imagePath, cloud: imageFromUrl.cloudName, transformations: imageFromUrl.transformations, version: imageFromUrl.version)
print(imageFromDetails.encoded)
```

---

### Applying Transformations and Getting Transformations

```swift
import PixelbinSwift

// Create Image url from cloud, zone and imagePath on cloud (Not local path)
let image = PixelBin.shared.image(imagePath: "example/logo/apple.jpg", cloud: "apple_cloud", zone: "south_asia")
print(imageFromDetails.encoded) // https://cdn.pixelbin.io/v2/apple_cloud/south_asia/original/example/logo/apple.jpg

let eraseTransformation = Transformation.erasebg() // Creating Erasebg Transformation
let resizeTransformation = Transformation.resize(height: 100, width: 100) // Creating Resize Transformation
image.addTransformation(eraseTransformation, resizeTransformation) // Applying transformation (as varargs, just keep passing all transformations)

let outputUrl = image.encoded // https://cdn.pixelbin.io/v2/apple_cloud/south_asia/erase.bg()~t.resize(h:100,w:100)/example/logo/apple.jpg
```

### Uploading Image and getting url object

```swift
// Signed Url and Field can be generated via using Backed SDK for pixelbin or API to generate signed url for upload

// Assume imagePath: "example/logo/apple.jpg", cloud: "apple_cloud", zone: "south_asia" & generate details
let signUrl = "SIGNED_URL"
let fields = [] // META_DATA in value

let signedDetails = SignedDetails(url: signUrl, fields: fields)

// Url is local file path, other fields chunkSize: Int = 1024, concurrency: Int = 1
PixelBin.shared.upload(file: url, signedDetails: signedDetails) { result in
    switch result {
    case let .success(response):
        if let image = response.0 {
            print("Uploaded Image Url: \(image.encoded)")  // https://cdn.pixelbin.io/v2/apple_cloud/south_asia/original/example/logo/apple.jpg

            let eraseTransformation = Transformation.erasebg() // Creating Erasebg Transformation
            let resizeTransformation = Transformation.resize(height: 100, width: 100) // Creating Resize Transformation
            image.addTransformation(eraseTransformation, resizeTransformation) // Applying transformation (as varargs, just keep passing all transformations)

            print("Transformed Image Url: \(image.encoded)")  // https://cdn.pixelbin.io/v2/apple_cloud/south_asia/erase.bg()~t.resize(h:100,w:100)/example/logo/apple.jpg
        }
    case let .failure(error):
        print("Error: \(error.localizedDescription)")
    }
}
```

| Parameter                                                                | Type    | Description                                                 |
| ------------------------------------------------------------------------ | ------- | ----------------------------------------------------------- |
| file ([File](https://developer.apple.com/documentation/foundation/file)) | File    | File to upload to Pixelbin                                  |
| signedDetails (SignedDetails)                                            | Object  | Signed details generated with the Pixelbin Backend SDK      |
| chunkSize (Int)                                                          | Integer | Size of chunks to be uploaded in KB (default value is 1024) |
| concurrency (Int)                                                        | Integer | Number of chunks to be uploaded in parallel API calls       |

- Resolves with Image object on success.
- Rejects with error on failure.

## List of Supported Transformations

{% if data %}
{% for plugin in data %}

### {{ loop.index }}. {{ plugin.plugin.name }}

{% for method in plugin.methods %}

<details>
<summary>{{ loop.index }}. {{ method.name }}</summary>

{% if method.parameters.length %}

#### Supported Configuration

| Parameter | Type | Default |
| --------- | ---- | ------- |
{% for parameter in method.parameters %}
| {{ parameter.name | camelCase }} | {% if parameter.type == 'enum' %}{{ parameter.type }}: {% for item in parameter.enum %}`{{ item }}`{% if not loop.last %}, {% endif %}{% endfor %}{% else %}{{ parameter.type }}{% endif %} | {% if parameter.default %}`{{ parameter.default }}`{% else %}N/A{% endif %} |
{% endfor %}
{% endif %}

#### Usage Example

```swift
let t = Transformation.{{ plugin.plugin.name | lower }}.{{ method.name | lower }}(
{% for parameter in method.parameters %}
    {{ parameter.name | camelCase }}: {% if parameter.default %}"{{ parameter.default }}"{% else %}""{% endif %}{% if not loop.last %}, {% endif %}
{% endfor %}
)
```

</details>

{% endfor %}
{% endfor %}
{% endif %}
