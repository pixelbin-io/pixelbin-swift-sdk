import Foundation

{% for method in data.methods %}

{% if data.methods | length > 1 %}public class {{ method.name | capitalize }}{% else %} public class {{ data.plugin.name }}{% endif %} {

    {% for parameter in method.parameters %}
    {% if parameter.type == 'enum' %}
    /**
     * {{ parameter.title }} options: {{ parameter.enum | join(', ') }}
     */
    public enum {{ parameter.name | capitalize | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") }}: String {
        {% for enumValue in parameter.enum %}
        case {{ enumValue | lower | replace("-", "_") | replace("in", "inp") | addUnderScoreIfInteger }} = "{{ enumValue }}"
        {% endfor %}
    }
    {% endif %}
    {% endfor %}

    /**
     * Method for {{ method.description }}
     * {% for parameter in method.parameters %}
     * @param {{ parameter.name }} {% if parameter.type == 'color' %}String{% elif parameter.type == 'enum' %}{{ parameter.name | capitalize }}?{% elif parameter.type == 'boolean' %}Bool{% elif parameter.type == 'integer' %}Int{% elif parameter.type == 'float' %}Float{% else %}{{ parameter.type }}{% endif %}{% if parameter.default is defined %} (Default: {% if parameter.type == 'color' %}"{{ parameter.default }}"{% else %}{{ parameter.default }}{% endif %}){% endif %}
     {% endfor %}
     * @return TransformationData.
     */
    public func {{ method.name }}(
        {% for parameter in method.parameters %}
        {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }}: {% if parameter.type == 'string' or parameter.type | isCustomDataType or parameter.type == 'bbox' %}String?{% elif parameter.type == 'enum' %}{{ parameter.name | capitalize | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "")}}?{% elif parameter.type == 'boolean' %}Bool?{% elif parameter.type == 'integer' %}Int?{% elif parameter.type == 'float' %}Float?{% else %}{{ parameter.type }}{% endif %} = nil{% if not loop.last %},{% endif %}
        {% endfor %}
    ) -> TransformationData {
        // Create the values dictionary
        var values = [String: String]()

        {% for parameter in method.parameters %}
        {% if parameter.type == 'enum' %}
        if let {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }} = {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }} {
            values["{{ parameter.identifier }}"] = {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }}.rawValue
        }
        {% else %}
        {% if parameter.type == 'string' or parameter.type | isCustomDataType %}
        if let {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }} = {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }}, !{{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }}.isEmpty {
            values["{{ parameter.identifier }}"] = {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }}
        }
        {% else %}
        if let {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }} = {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }} {
            values["{{ parameter.identifier }}"] = String(describing: {{ parameter.name | replace(" ", "") | replace("in", "inp") | replace(".", "") | replace("Type", "PType") | replace("[^a-zA-Z0-9]", "") | lower }})
        }
        {% endif %}
        {% endif %}
        {% endfor %}

        return TransformationData(
            plugin: "{{ method.plugin }}",
            name: "{{ method.name }}",
            values: values
        )
    }
}

{% endfor %}
